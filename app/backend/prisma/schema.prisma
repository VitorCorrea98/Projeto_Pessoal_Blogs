// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  title     String   @db.VarChar(255)
  content   String?
  intro     String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int      @map("author_id")
  comments  Comment[]
  likes     Like[]
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique @map("user_id")
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
  likes   Like[]
  comments  Comment[]
}

model Comment {
  id      Int      @id @default(autoincrement())
  comment String
  post    Post     @relation(fields: [postId], references: [id])
  postId  Int      @map("post_id")
  user    User     @relation(fields: [userId], references: [id])
  userId  Int      @map("user_id")
}

model Like {
  id      Int      @id @default(autoincrement())
  post    Post     @relation(fields: [postId], references: [id])
  postId  Int      @map("post_id")
  user    User     @relation(fields: [userId], references: [id])
  userId  Int      @map("user_id")
}
